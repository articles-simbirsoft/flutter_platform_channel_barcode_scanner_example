// Autogenerated from Pigeon (v7.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.example_barcode_scanner;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {
  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
      "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }

  public enum ScannerType {
    TSD(0),
    CAMERA(1);

    private final int index;

    private ScannerType(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CameraProperties {
    private @NonNull Long textureId;

    public @NonNull Long getTextureId() {
      return textureId;
    }

    public void setTextureId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"textureId\" is null.");
      }
      this.textureId = setterArg;
    }

    private @NonNull Double aspectRatio;

    public @NonNull Double getAspectRatio() {
      return aspectRatio;
    }

    public void setAspectRatio(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"aspectRatio\" is null.");
      }
      this.aspectRatio = setterArg;
    }

    private @NonNull Long width;

    public @NonNull Long getWidth() {
      return width;
    }

    public void setWidth(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"width\" is null.");
      }
      this.width = setterArg;
    }

    private @NonNull Long height;

    public @NonNull Long getHeight() {
      return height;
    }

    public void setHeight(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"height\" is null.");
      }
      this.height = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private CameraProperties() {}

    public static final class Builder {

      private @Nullable Long textureId;

      public @NonNull Builder setTextureId(@NonNull Long setterArg) {
        this.textureId = setterArg;
        return this;
      }

      private @Nullable Double aspectRatio;

      public @NonNull Builder setAspectRatio(@NonNull Double setterArg) {
        this.aspectRatio = setterArg;
        return this;
      }

      private @Nullable Long width;

      public @NonNull Builder setWidth(@NonNull Long setterArg) {
        this.width = setterArg;
        return this;
      }

      private @Nullable Long height;

      public @NonNull Builder setHeight(@NonNull Long setterArg) {
        this.height = setterArg;
        return this;
      }

      public @NonNull CameraProperties build() {
        CameraProperties pigeonReturn = new CameraProperties();
        pigeonReturn.setTextureId(textureId);
        pigeonReturn.setAspectRatio(aspectRatio);
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(textureId);
      toListResult.add(aspectRatio);
      toListResult.add(width);
      toListResult.add(height);
      return toListResult;
    }

    static @NonNull CameraProperties fromList(@NonNull ArrayList<Object> list) {
      CameraProperties pigeonResult = new CameraProperties();
      Object textureId = list.get(0);
      pigeonResult.setTextureId((textureId == null) ? null : ((textureId instanceof Integer) ? (Integer) textureId : (Long) textureId));
      Object aspectRatio = list.get(1);
      pigeonResult.setAspectRatio((Double) aspectRatio);
      Object width = list.get(2);
      pigeonResult.setWidth((width == null) ? null : ((width instanceof Integer) ? (Integer) width : (Long) width));
      Object height = list.get(3);
      pigeonResult.setHeight((height == null) ? null : ((height instanceof Integer) ? (Integer) height : (Long) height));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class StartScanResult {
    private @NonNull ScannerType scannerType;

    public @NonNull ScannerType getScannerType() {
      return scannerType;
    }

    public void setScannerType(@NonNull ScannerType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"scannerType\" is null.");
      }
      this.scannerType = setterArg;
    }

    private @Nullable CameraProperties cameraProperties;

    public @Nullable CameraProperties getCameraProperties() {
      return cameraProperties;
    }

    public void setCameraProperties(@Nullable CameraProperties setterArg) {
      this.cameraProperties = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private StartScanResult() {}

    public static final class Builder {

      private @Nullable ScannerType scannerType;

      public @NonNull Builder setScannerType(@NonNull ScannerType setterArg) {
        this.scannerType = setterArg;
        return this;
      }

      private @Nullable CameraProperties cameraProperties;

      public @NonNull Builder setCameraProperties(@Nullable CameraProperties setterArg) {
        this.cameraProperties = setterArg;
        return this;
      }

      public @NonNull StartScanResult build() {
        StartScanResult pigeonReturn = new StartScanResult();
        pigeonReturn.setScannerType(scannerType);
        pigeonReturn.setCameraProperties(cameraProperties);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(scannerType == null ? null : scannerType.index);
      toListResult.add((cameraProperties == null) ? null : cameraProperties.toList());
      return toListResult;
    }

    static @NonNull StartScanResult fromList(@NonNull ArrayList<Object> list) {
      StartScanResult pigeonResult = new StartScanResult();
      Object scannerType = list.get(0);
      pigeonResult.setScannerType(scannerType == null ? null : ScannerType.values()[(int) scannerType]);
      Object cameraProperties = list.get(1);
      pigeonResult.setCameraProperties((cameraProperties == null) ? null : CameraProperties.fromList((ArrayList<Object>) cameraProperties));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);

    void error(Throwable error);
  }

  private static class ScanHostApiCodec extends StandardMessageCodec {
    public static final ScanHostApiCodec INSTANCE = new ScanHostApiCodec();

    private ScanHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return CameraProperties.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return StartScanResult.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof CameraProperties) {
        stream.write(128);
        writeValue(stream, ((CameraProperties) value).toList());
      } else if (value instanceof StartScanResult) {
        stream.write(129);
        writeValue(stream, ((StartScanResult) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface ScanHostApi {

    void startScan(Result<StartScanResult> result);

    void stopScan(Result<Void> result);

    /** The codec used by ScanHostApi. */
    static MessageCodec<Object> getCodec() {
      return ScanHostApiCodec.INSTANCE;
    }
    /**Sets up an instance of `ScanHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ScanHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ScanHostApi.startScan", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Result<StartScanResult> resultCallback = 
                      new Result<StartScanResult>() {
                        public void success(StartScanResult result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.startScan(resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ScanHostApi.stopScan", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Result<Void> resultCallback = 
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(0, null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.stopScan(resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static final class ScanFlutterApi {
    private final BinaryMessenger binaryMessenger;

    public ScanFlutterApi(BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */     public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by ScanFlutterApi. */
    static MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    public void onScan(@NonNull String dataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.ScanFlutterApi.onScan", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(dataArg)),
          channelReply -> callback.reply(null));
    }
  }
}
